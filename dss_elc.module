<?php

  /*
   * Intramodular dependencies
   *
   */
module_load_include('inc', 'dss_elc', 'includes/utility');
module_load_include('inc', 'dss_elc', 'includes/data_access');
module_load_include('inc', 'dss_elc', 'includes/person');
module_load_include('inc', 'dss_elc', 'includes/item');
module_load_include('inc', 'dss_elc', 'includes/bib_rels');
module_load_include('inc', 'dss_elc', 'includes/pers_rels');

/**
 * Implements hook_menu()
 *
 */
function dss_elc_menu() {

  $items = array(
		 'node/get' => array(
				     'page callback' => 'dss_elc_get_node_ajax',
				     'access callback' => TRUE,
				     ),
		 'nodes/get' => array(
				      'page callback' => 'dss_elc_get_nodes_ajax',
				      'access callback' => TRUE,
				      ),
		 'pers-rels/get' => array(
					  'page callback' => 'dss_elc_get_pers_rels_ajax',
					  'access callback' => TRUE
					  ),
		 'bib-rels/get' => array(
					 'page callback' => 'dss_elc_get_bib_rels_ajax',
					 'access callback' => TRUE
					 ),
		 'qty/rels' => array(
				     'page callback' => 'dss_elc_qty_rels_ajax',
				     'access callback' => TRUE
				     )
		 );

  return $items;
}

/**
 * Implements hook_permission()
 * @author griffinj@lafayette.edu
 *
 */
function dss_elc_permission() {

  return array(
	       'access arguments page' => array(
						'title' => t('Query the Person node interface'),
						'description' => t('Query the Person node interface'),
						),
	       );
}

/**
 * Implements hook_theme()
 * @author griffinj@lafayette.edu
 *
 */
function dss_elc_theme($existing, $type, $theme, $path) {

  return array(
	       'loan_node_form' => array(
					 'render element' => 'form',
					 'file' => 'theme/theme.inc',
					 'template' => 'theme/loan-node-form',
					 'path' => drupal_get_path('module', 'dss_elc'),
					 ),
	       'human_node_form' => array(
					  'render element' => 'form',
					  'file' => 'theme/theme.inc',
					  'template' => 'theme/human-node-form',
					  'path' => drupal_get_path('module', 'dss_elc'),
					  ),
	       'book_node_form' => array(
					 'render element' => 'form',
					 'file' => 'theme/theme.inc',
					 'template' => 'theme/book-node-form',
					 'path' => drupal_get_path('module', 'dss_elc'),
					 ),
	       'periodical_node_form' => array(
					       'render element' => 'form',
					       'file' => 'theme/theme.inc',
					       'template' => 'theme/book-node-form',
					       'path' => drupal_get_path('module', 'dss_elc'),
					       ),
	       'item_node_form' => array(
					 'render element' => 'form',
					 'file' => 'theme/theme.inc',
					 'template' => 'theme/item-node-form',
					 'path' => drupal_get_path('module', 'dss_elc'),
					 ),
	       'manifestation_node_form' => array(
						  'render element' => 'form',
						  'file' => 'theme/theme.inc',
						  'template' => 'theme/manifestation-node-form',
						  'path' => drupal_get_path('module', 'dss_elc'),
						  ),
	       'personal_relationship_node_form' => array(
							  'render element' => 'form',
							  'file' => 'theme/theme.inc',
							  'template' => 'theme/personal-relationship-node-form',
							  'path' => drupal_get_path('module', 'dss_elc'),
							  ),
	       /*
,

	       'organization_node_form' => array(
						 'render element' => 'form',
						 'file' => 'theme/theme.inc',
						 'template' => 'theme/organization-node-form',
						 'path' => drupal_get_path('module', 'dss_elc'),
						 ),
	       'location_node_form' => array(
					     'render element' => 'form',
					     'file' => 'theme/theme.inc',
					     'template' => 'theme/location-node-form',
					     'path' => drupal_get_path('module', 'dss_elc'),
					     ),
	       */
							  );
  }

/*
 * Implements hook_node_validate()
 * @author griffinj@lafayette.edu
 *
 */
function dss_elc_node_validate($node, $form, &$form_state) {

  // To be implemented
  /*
  dpm($form);
  switch($form['#bundle']) {

  case 'personal_relationship':

    if($form_state['values']['title'] == '') {

      form_set_value($form['title'], 'testingTitle1', $form_state);
    }
    break;
  }
  */
}

/**
 * Implements hook_node_presave()
 * @author griffinj@lafayette.edu
 *
 */
define('ROLES_TAXON', 'roles');
function dss_elc_node_presave($node) {

  switch($node->type) {

  case 'loan':

    dss_elc_loan_node_presave($node);
    break;

  case 'personal_relationship':

    //Override the title
    //$node->title = $node->field_pers_rel_subject[$node->language][0]['target_id'] . ' is a ' . $node->field_pers_rel_role[$node->language][0]['tid'] . ' in relation to ' . $node->field_pers_rel_object[$node->language][0]['target_id'];

    $subjectNode = dss_elc_get_node('nid', $node->field_pers_rel_subject[$node->language][0]['target_id'], 'human');
    $objectNode = dss_elc_get_node('nid', $node->field_pers_rel_object[$node->language][0]['target_id']);
    $roleTerm = taxonomy_term_load($node->field_pers_rel_role[$node->language][0]['tid']);

    $node->title = $subjectNode->title . ' is a ' . $roleTerm->name . ' in relation to ' . $objectNode->title;

    break;

  case 'book':
  case 'periodical':
  case 'item':
    
    dss_elc_item_node_presave($node);
  break;

  default:

    break;
  }
}

/**
 * Implements hook_insert()
 * @author griffinj@lafayette.edu
 *
 * The NID is required for the function dss_elc_update_pers_rels
 */
function dss_elc_node_insert($node) {

  switch($node->type) {

  case 'personal_relationship':

    /*
    // Handling for Representative relationships
    if(!empty($node->field_pers_rel_role[$node->language]) &&
       $node->field_pers_rel_role[$node->language][0]['name'] == 'Representative') {

      dss_elc_update_pers_rels(intval($node->field_pers_rel_subject[$node->language][0]['target_id']), intval($node->field_pers_rel_object[$node->language][0]['target_id']));
    }
    */
    break;
    
  case 'item':
  case 'periodical':
  case 'book':

    dss_elc_item_node_insert($node);
  break;

  default:
    break;
  }
}

// Deprecate: Use "restws"

function dss_elc_get_pers_rels_ajax($subjectNid) {

  drupal_json_output(dss_elc_get_pers_rels($subjectNid) );
}

function dss_elc_get_bib_rels_ajax($subjectNid) {

  drupal_json_output(dss_elc_get_bib_rels($subjectNid) );
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Show titles of empty fields.
 * Thank you ygerasimov! (Please see http://ygerasimov.com/show-empty-fields)
 * Warning: _Does_ override hide() invocations on fields!
 */
function dss_elc_field_attach_view_alter(&$output, $context) {

  // We proceed only on nodes.
  if ($context['entity_type'] != 'node' || $context['view_mode'] != 'full') {
    
    return;
  }
 
  $node = $context['entity'];
  // Load all instances of the fields for the node.
  $instances = _field_invoke_get_instances('node', $node->type, array('default' => TRUE, 'deleted' => FALSE));
 
  foreach ($instances as $field_name => $instance) {

    // Set content for fields they are empty.
    if (empty($node->{$field_name})) {

      $display = field_get_display($instance, 'full', $node);
      // Do not add field that is hidden in current display.
      if ($display['type'] == 'hidden') {
        continue;
      }
      // Load field settings.
      $field = field_info_field($field_name);
      // Set output for field.
      $output[$field_name] = array(
				   '#theme' => 'field',
				   '#title' => $instance['label'],
				   '#label_display' => 'above',
				   '#formatter' => $display['type'], // Please see field_default_view()
				   '#field_type' => $field['type'],
				   '#field_name' => $field_name,
				   '#bundle' => $node->type,
				   '#object' => $node,
				   '#items' => array(),
				   '#entity_type' => 'node',
				   '#weight' => $display['weight'],
				   0 => array('#markup' => '&nbsp;'),
				   );
    }
  }
}

/**
 * Retrieve Nodes by Content Type
 *
 */
/*
function dss_elc_get_nodes($contentType) {

  $query = new EntityFieldQuery();

  $entities = $query->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', $contentType)
    ->execute();

  if(!empty($entities['node'])) {

    return entity_load('node', array_keys($entities['node']));
  } else {

    return array();
  }
}
*/

/**
 * @author griffinj@lafayette.edu
 *
 * To be integrated with the services Module as a RESTful API
 *
 * Example: http://elc.dev.lafayette.edu/node/get/[CONTENT_TYPE]/[NID]
 * Example: http://elc.dev.lafayette.edu/node/get/[CONTENT_TYPE]/[NID]
 *
 */
function dss_elc_get_node_ajax($contentType, $field, $value=NULL) {

  // If value isn't set, retrieve by NID and contentType
  if(!isset($value)) {

    $value = $field;
    $field = $contentType;

    drupal_json_output(dss_elc_get_node($field, $value));
  } else {
    
    drupal_json_output(dss_elc_get_node($field, $value, $contentType));
  }
}

function dss_elc_get_univariate_rels($contentTypes, $field, $measure_names = array('mean' => array(),
										   'median' => array(),
										   'max' => array(),
										   'total' => array()
										   )) {

  // Get nodes of all content types

  $m = function($node) {
    
    // Quantitative values only
    /*
      if(!is_numeric($node->$field)) {
      
      throw new Exception('Non quantitative value found in field ' . $field);
      }
    */
    return $node->$field;
  };

  $measures = array();
  foreach($measure_names as $measure) {
    
    $measures[$measure] = array();
  }

  /*
    Mean[list]mean (average)
    Median[list]median (central value)
    Max[list]maximum value
    Variance[list]variance
    StandardDeviation[list]standard deviation
    Quantile[list,q]q^(th) quantile
    Total[list]total
  */

  switch($field) {

  case 'field_item_format':

    $fieldValues = array('Octavo' => 0,
			 'Quarto' => 1,
			 'Duodecimo' => 2);
    break;

  default:

    $fieldValues = array();
    break;
  }

  foreach($fieldValues as $fieldName => $fieldValue) {

    foreach($contentTypes as $contentType) {

      if(array_key_exists('total', $measures) ||
	 array_key_exists('mean', $measures)) {

	$measures['total'][$contentType][$fieldName] = count(dss_elc_get_nodes($contentType, $field, $fieldValue, FIELD_TYPE_ENTITY));
      }
    }
  }

  if(array_key_exists('mean', $measures)) {

    $reduce = function($u, $v) {
      
	  return $u + $v['total'];
    };

    $fieldTotals = array();
    foreach($measures['total'] as $contentType => $field) {

      // To be implemented
    }

    foreach($fieldValues as $fieldName => $fieldValue) {

      $measures['mean'][$fieldName] = array_reduce($reduce, $measures['total']) / count(array_keys($measures['total'][$contentType]));
    }
  }

  return $measures;
}



/**
 * Retrieve a data set for bivariate analysis
 * @author griffinj@lafayette.edu
 */
function dss_elc_get_bivariate_rels($contentTypes, $fieldU, $fieldV, $fieldUType=0, $fieldVType=0, $dateField=NULL, $dateFieldRange=FALSE) {

  $sets = array();

  foreach($contentTypes as $contentType) {

    $sets[$contentType] = array($fieldU => array($fieldV => array()));
    
    foreach(dss_elc_get_nodes($contentType) as $node) {

      $fieldUValue = dss_elc_get_node_field($node, $fieldU, $fieldUType);
      $fieldVValue = dss_elc_get_node_field($node, $fieldV, $fieldVType);

      
      if($dateFieldRange) {
	
	if(isset($node->$dateField[$node->language][0]['value']) && isset($node->$dateField[$node->language][0]['value2'])) {
	    
	  // "field_loan_duration":{"und":[{"value":"2013-07-10T00:00:00","value2":"2013-07-10T00:00:00","timezone":"America\/New_York","timezone_db":"America\/New_York","date_type":"date"}]}
	  if($dateField == $fieldU) {
	    
	    if(isset($node->$fieldV)) {

	      //$sets[$contentType] = array($fieldU => array($fieldV => array()));
	      $sets[$contentType][$fieldU][$fieldV][] = array($node->$dateField[$node->language][0]['value2'] - $node->$dateField[$node->language][0]['value'], $fieldVValue);
	    }
	  } else {
	    
	    if(isset($node->$fieldU)) {
	      
	      // "field_loan_duration":{"und":[{"value":"2013-07-10T00:00:00","value2":"2013-07-10T00:00:00","timezone":"America\/New_York","timezone_db":"America\/New_York","date_type":"date"}]}
	      $sets[$contentType][$fieldU][$fieldV][] = array($fieldUValue, $node->$dateField[$node->language][0]['value2'] - $node->$dateField[$node->language][0]['value']);
	    }
	  }
	}
      } else {
	
	if($dateField == $fieldU) {
	  
	  $sets[$contentType][$fieldU][$fieldV][] = array($node->$dateField[$node->language][0]['value'], $fieldVValue);
	} elseif($dateField == $fieldV) {

	  $sets[$contentType][$fieldU][$fieldV][] = array($fieldUValue, $node->$dateField[$node->language][0]['value']);
	} else {
	  
	  $sets[$contentType][$fieldU][$fieldV][] = array($fieldUValue, $fieldVValue);
	}
      }
    }
  }
}

/**
 * Respond to POST requests for data sets used in quantiative analyses
 * This should be refactored for direct parsing by either NumPy or SciRuby
 * @author griffinj@lafayette.edu
 */
function dss_elc_qty_rels_ajax() {

  if($_POST['analysis'] == 'bivariate') {

    //return drupal_json_output(dss_elc_get_bivariate_rels($_POST['contentTypes'], $_POST['fields'][0], $_POST['fields'][1]));
    return drupal_json_output(array(
				    'loan' => array('value' =>
						    array('field_loan_duration' =>
							  array('total' =>
								array('field_loan_volumes_loaned' => array(
													   array(5, 20),
													   array(480, 90),
													   array(250, 50))
								      )))
						    )));
  }

  if($_POST['contentTypes'] == array('book')) {
    
    // {"total":{"book":{"Octavo":1661,"Quarto":46,"Duodecimo":1997}}}
    return drupal_json_output(
			      array('total' => array('book' => array('Octavo' => 1661,
								     'Quarto' => 46,
								     'Duodecimo' => 1997)))
			      );
      
  } elseif($_POST['contentTypes'] == array('periodical')) {
    
    return drupal_json_output(
			      array('total' => array('periodical' => array('Octavo' => 2,
									   'Quarto' => 0,
									   'Duodecimo' => 2)))
			      );
  }
  
  if(isset($_POST['measures'])) {
    
    return drupal_json_output(dss_elc_get_univariate_rels($_POST['contentTypes'], $_POST['fields'], $_POST['measures']));
  }
  
  return drupal_json_output(dss_elc_get_univariate_rels($_POST['contentTypes'], $_POST['fields']));
}

/**
 *
 * @author griffinj@lafayette.edu
 */
function dss_elc_get_nodes_ajax($contentType, $field, $value=NULL) {

  if(!isset($value)) {

    $value = $field;
    $field = $contentType;

    drupal_json_output(dss_elc_get_nodes(NULL, $field, $value));
  } else {
    
    drupal_json_output(dss_elc_get_nodes($field, $value, $contentType, 1));
  }
}

function dss_elc_form_insert_js() {

  if(empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {

    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'ui.autocomplete');
    drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/build/node_modal.min.js');
    drupal_add_js(array('dssElc' => array('isAjaxRequest' => !empty($_SERVER['HTTP_X_REQUESTED_WITH']))), 'setting');
    drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/build/node.min.js');
  }
}

function dss_elc_form_insert_css() {

  // Work-around
  /*
  drupal_add_css('
', array('type' => 'inline'));
  */
}



function dss_elc_theme_registry_alter(&$theme_registry) {

  //dpm($theme_registry);

  /*
  $theme_registry['block']['template'] = 'human';
  $theme_registry['block']['path'] = drupal_get_path('module', 'example_module');
  $theme_registry['block']['type'] = 'module';
  $theme_registry['block']['theme path'] = drupal_get_path('module', 'example_module');
  $theme_registry['block']['theme paths'] = Array();
  */
} 

/**
 *
 */
function dss_elc_date_combo_element_process($element, &$form_state, $form) {

  //dpm($element);
}

/**
 * Theme the field_loan_duration Field
 *
 */
function dss_elc_field_loan_duration_after_build(&$element) {

  foreach($element as $key => &$value) {

    if(is_numeric($key)) {

      $value['show_todate']['#title'] = 'Date Returned Listed?';
      $value['show_todate']['#checked'] = TRUE;

      hide($value['show_todate']);

      $value['value']['#title'] = 'Check-out';
      //$value['value']['date']['#description'] = 'YYYY-MM-DD';
      unset($value['value']['date']['#description']);

      $value['value2']['#title'] = 'Check-in';
      //$value['value2']['date']['#description'] = 'YYYY-MM-DD';
      unset($value['value2']['date']['#description']);
    }
  }

  return $element;
}

/**
 * Theme the field_loan_issues_loaned Field
 *
 */
function dss_elc_field_loan_issues_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_loan_volumes_loaned Field
 *
 */
function dss_elc_field_loan_volumes_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_loan_months_loaned Field
 *
 */
function dss_elc_field_loan_months_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_loan_years_loaned Field
 *
 */
function dss_elc_field_loan_years_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_bib_rel_object Field
 *
 */
function dss_elc_field_bib_rel_object_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more' && isset($value['#type']) && $value['#type'] == 'submit') {

      //$value['#suffix'] = '<button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-book-modal">New Book</button><button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-periodical-modal">New Periodical</button><button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-item-modal">New Item</button>';

      $value['#suffix'] = '<button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-item-modal">New Item</button>';
    }
  }

  return $element;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Restructuring all Node forms
 *
 */
function dss_elc_form_node_form_alter(&$form, $form_state) {

  $form['actions']['submit']['#value'] = 'Hold for Review';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_loan_node_form_alter(&$form, $form_state, $form_id) {

  drupal_add_css(drupal_get_path('module', 'dss_elc') . '/css/loan_form.css');
  dss_elc_form_insert_js();

  // Apply theming for the field_bib_rel_object Field
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#after_build'][] = 'dss_elc_field_bib_rel_object_after_build';

  // Apply theming for the field_loan_duration Field
  $form['field_loan_duration'][$form['field_loan_duration']['#language']]['#after_build'][] = 'dss_elc_field_loan_duration_after_build';
  //$form['field_loan_duration'][$form['field_loan_duration']['#language']]['#process'][] = 'dss_elc_date_combo_element_process';

  // Apply theming for fields
  /**
   * field_loan_issues_loaned
   * field_loan_volumes_loaned
   * field_loan_months_loaned
   * field_loan_years_loaned
   *
   */

  foreach(array('field_loan_issues_loaned',
		'field_loan_volumes_loaned',
		'field_loan_months_loaned',
		'field_loan_years_loaned') as $field_name) {

    //$form[$field_name][$form[$field_name]['#language']]['#after_build'][] = 'dss_elc_' . $field_name . '_after_build';
    hide($form[$field_name]);
  }

  /**
   * 
   *
   */
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#after_build'][] = 'dss_elc_field_bib_rel_object_after_build';

  drupal_set_title(t('Add a Loan'));

  // Set the tabindex values
  // No time, implementing this in Javascript (refactor)
  /*
  $form['field_loan_filename']['#attributes']['tabindex'] = '1';
  $form['field_loan_shareholder']['#attributes']['tabindex'] = '2';
  $form['field_bib_rel_subject']['#attributes']['tabindex'] = '3';
  $form['field_bib_rel_object']['#attributes']['tabindex'] = '4';
  */

  $form['field_loan_shareholder'][$form['field_loan_shareholder']['#language']]['#prefix'] = '<div id="field-loan-shareholder-add-more-wrapper">';
  //$form['field_loan_shareholder'][$form['field_loan_shareholder']['#language']]['#suffix'] = '<div class="node-add-shareholder form-item"><button class="add-node-modal btn btn-info" id="add-human-modal">New Shareholder</button></div></div>';
  $form['field_loan_shareholder'][$form['field_loan_shareholder']['#language']]['#suffix'] = '</div>';

  $form['field_bib_rel_subject'][$form['field_bib_rel_subject']['#language']]['#prefix'] = '<div id="field-bib-rel-subject-add-more-wrapper">';
  //$form['field_bib_rel_subject'][$form['field_bib_rel_subject']['#language']]['#suffix'] = '<div class="node-add-subject form-item"><button class="add-node-modal btn btn-info" id="add-human-modal">New Patron</button></div></div>';
  $form['field_bib_rel_subject'][$form['field_bib_rel_subject']['#language']]['#suffix'] = '</div>';

  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#prefix'] = '<div id="field-bib-rel-object-add-more-wrapper">';
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] = '<div class="node-add-item form-item"><button class="add-node-modal btn btn-info" id="add-item-modal" type="button" data-content-type="item" data-node-type="">Create New Item</button></div></div>';

  $form['field_loan_shareholder']['#attributes']['disabled'] = true;

  // For the Issues Loaned, Volumes Loaned, Months Loaned, and Years Loaned
  foreach(array('issues', 'volumes', 'months', 'years') as $field) {
    
    $form["field_loan_" . $field . "_loaned"][$form["field_loan_" . $field . "_loaned"]['#language']]['add_more']['#value'] = 'Add another ' . substr($field, 0, strlen($field) - 1);
  }

  /**
   * This has been temporarily disabled in order to resolve issues with autocompletion integration
   * @todo Resolve issues with JavaScript integration and pass this markup through the templating layer
   *
   */
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#prefix'] = $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#prefix'] . '<input id="edit-field-bib-rel-object-und" class="form-text required form-autocomplete" type="text" maxlength="1024" size="60" value="" name="field_bib_rel_object[und][0][target_id]" tabindex="4" autocomplete="OFF" aria-autocomplete="list">';

  /**
   * Hard-coding the field for volumes
   * (Note: These are not fields to be captured as Drupal content, as they, more properly, reference other Entities)
   *
   */
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] = $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] . '<div class="control-group form-type-textfield form-item-field-volumes-und-0-value form-item"><label class="control-label" for="edit-field-volumes-und-0-value">Volume(s) </label><div class="controls"><input id="edit-field-volumes-und-0-value" class="text-full form-text" type="text" maxlength="255" size="60" value="" name="volumes[und][0][value]" tabindex=""></div></div>';

  /**
   * Hard-coding the field for issues
   * (Note: These fields are also not to be captured as Drupal content)
   *
   */
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] = $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] . '<div class="control-group form-type-textfield form-item-field-issues-und-0-value form-item"><label class="control-label" for="edit-field-issues-und-0-value">Issue(s) </label><div class="controls"><input id="edit-field-issues-und-0-value" class="text-full form-text" type="text" maxlength="255" size="60" value="" name="issues[und][0][value]" tabindex=""></div></div>';

  /**
   * Deprecated in favor of JavaScript functionality
   *
   */
  /*
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['add_more']['#label'] = 'More Items Loaned?';
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['add_more']['#value'] = 'More Items Loaned?';
  */
  hide($form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['add_more']);

  $form['field_bib_rel_type'][$form['field_bib_rel_subject']['#language']]['#title'] = 'Tags';
  $form['body'][$form['body']['#language']][0]['#title'] = 'Notes for Review';

  hide($form['field_was_ordered']);
}

function dss_elc_form_human_node_form_add_more_submit($form, &$form_state) {

  //print_r($form_state['values']['field_human_pers_rels']['und'][0]);
  //print_r($form_state['values']['field_human_pers_rels']['und'][0]);

  //print_r($form_state['complete form']);

  //print_r(array_keys($form_state));
  //print_r($form_state['values']);
  //print_r($form_state);
  //dpm($form_state);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_human_node_form_alter(&$form, $form_state) {

  drupal_set_title(t('Add Person'));

  //$form['field_human_pers_rels']['und']['add_more']['#submit'][] = 'dss_elc_form_human_node_form_add_more_submit';

  //$form['field_human_pers_rels']['und']['add_more']['#ajax']['callback'] = array($form['field_human_pers_rels']['und']['add_more']['#ajax']['callback'], '';

  //$form['field_human_pers_rels']['und']['#suffix'] = '';

  /*
  // Hide certain fields for the modal
  if(!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {
    $variables['form']['field_human_pers_rels'][$variables['form']['field_human_pers_rels']['#language']]['add_more']['#value'] = '+';
    //$variables['form']['field_human_pers_rels'][$variables['form']['field_human_pers_rels']['#language']]['#prefix'] = render($variables['form']['field_human_pers_rels'][$variables['form']['field_human_pers_rels']['#language']]['add_more']);
    //$variables['form']['field_human_pers_rels']['add_more'] = $variables['form']['field_human_pers_rels'][$variables['form']['field_human_pers_rels']['#language']]['add_more'];

    //array_merge($variables['form']['field_human_pers_rels'][$variables['form']['field_human_pers_rels']['#language']]['add_more'], $variables['form']['field_human_pers_rels']);
    
    /**
    * Ensure that the fields are added in the proper order
    *
    */

  //$form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']['#submit'][] = 'dss_elc_field_human_pers_rels_add_more_submit';
  //$form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']['#ajax']['callback'] = array('field_add_more_js', 'dss_elc_field_human_pers_rels_add_more_submit');

  /**
   * Reorder the NULL value for field_human_gender
   * Resolves EDDC-156
   */
  unset($form['field_human_gender'][$form['field_human_gender']['#language']]['#options']['_none']);

  /** Set the default value to unknown (for migrated records) */
  $form['field_human_gender'][$form['field_human_gender']['#language']]['#default_value'] = '_none';

  /**
   * Rename the label "N/A" to "Unknown"
   * Resolves EDDC-85
   *
   */
  $form['field_human_gender'][$form['field_human_gender']['#language']]['#options']['_none'] = 'Unknown';
  $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']['#value'] = '+';
  $new_field = array('add_more' => $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']);
  unset($form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']);

  foreach($form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']] as $key => $value) {

    $new_field[$key] = $value;
  }
  //dpm($new_field);
  
  $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']] = $new_field;

  //dpm($form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]);
  //dpm($form['field_human_pers_rels']);

  /*
  //$form['field_person_type'] = array();
  $form['field_human_pers_rels'] = array();
  $form['field_person_location'] = array();
  $form['field_person_membership'] = array();
  $form['field_human_gender'] = array();
  $form['field_human_occupation'] = array();
  */

  /*
    $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['#prefix'] = '<div id="field-human-pers-rels-add-more-wrapper">';
    $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['#suffix'] = '<div class="node-add-field-human-pers-rels">Add a new ' . l(t('personal relationship'), 'node/add/personal-relationship', array('attributes' => array('class' => 'add-node-modal', 'id' => 'add-personal-relationship-modal'))) . '</div></div>';

  $form['field_person_membership'][$form['field_person_membership']['#language']]['#prefix'] = '';
  $form['field_person_membership'][$form['field_person_membership']['#language']]['#suffix'] = '<div class="node-add-field-person-membership">Add a new ' . l(t('organization'), 'node/add/organization', array('attributes' => array('class' => 'add-node-modal', 'id' => 'add-organization-modal'))) . '</div>';
  
  $form['field_person_location'][$form['field_person_location']['#language']]['#prefix'] = '<div id="field-person-location-add-more-wrapper">';
  $form['field_person_location'][$form['field_person_location']['#language']]['#suffix'] = '<div class="node-add-person-location">Add a new ' . l(t('location'), 'node/add/location', array('attributes' => array('class' => 'add-node-modal', 'id' => 'add-location-modal'))) . '</div></div>';
  */


}

function dss_elc_form_ajax_item_node_form_alter(&$form) {

  drupal_set_title(t('Add Item'));

  // Hide certain fields for the modal
  if(!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {

    $form['field_artifact_type'] = array();
    $form['field_artifact_metadata_record'] = array();
    $form['field_item_embodies'] = array();
  }

  /**
   * Modify the order and labeling for the format types
   * Resolves EDDC-155
   */
  unset($form['field_item_format'][$form['field_item_format']['#language']]['#options']['_none']);
  $form['field_item_format'][$form['field_item_format']['#language']]['#options']['_none'] = 'Unknown';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_book_node_form_alter(&$form, $form_state) {

  dss_elc_form_insert_js();
  drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/build/book_form.min.js');

  hide($form['field_item_total_volumes']);

  // Hide certain fields for the modal
  dss_elc_form_ajax_item_node_form_alter($form);
  // Issue
  // Work-around
  hide($form['field_item_volume']);

  // Authors
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button">New Person</button></div></div>';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_periodical_node_form_alter(&$form, $form_state) {

  dss_elc_form_insert_js();
  //drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/book_form.min.js');
  drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/build/periodical_form.min.js');

  hide($form['field_item_total_volumes']);
  // Issue
  // Work-around
  hide($form['field_item_volume']);

  // Hide certain fields for the modal
  dss_elc_form_ajax_item_node_form_alter($form);

  // Authors
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button">New Person</button></div></div>';
}

/**
 * Alterations to the form for personal_relationship nodes
 *
 */
function dss_elc_form_personal_relationship_node_form_alter(&$form, $form_state) {

  drupal_set_title(t('Add Relationship'));
  $form['field_pers_rel_subject'][$form['field_pers_rel_subject']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_pers_rel_subject'][$form['field_pers_rel_subject']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button" data-content-type="human" data-node-type="">Create New Person</button></div></div>';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_item_node_form_alter(&$form, $form_state) {

  dss_elc_form_insert_js();
  //drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/build/item_form.min.js');

  $autocomplete_fields = array('entityRefs' => array("#edit-field-artifact-was-authored-by-und"),
			       'terms' => array("#edit-field-item-number-taxon-und", "#edit-field-item-subject-und")
			       );
  drupal_add_js(array('dssElcAutocomplete' => array('fields' => $autocomplete_fields)), 'setting');
  drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/dss_elc_autocomplete_loan.js');

  hide($form['field_item_total_volumes']);
  // Issue
  // Work-around
  hide($form['field_item_volume']);

  // Hide certain fields for the modal
  dss_elc_form_ajax_item_node_form_alter($form);

  // Authors
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button" data-content-type="human" data-node-type="author">Create New Person</button></div></div>';
}

/**
 * Implements hook_form_alter
 */
function dss_elc_form_alter(&$form, &$form_state, $form_id) {

  hide($form['actions']['preview']);

  if($form_id == 'multi_node_add_page') {

    //hide(form['fields_req']);
    //hide($form['fields_to_utilize']);
    hide($form['shortcut']);
    $form['number']['#title'] = 'Number of Entities';
  }

  if($form_id == 'human_node_form' ||
     $form_id == 'item_node_form' ||
     $form_id == 'book_node_form' ||
     $form_id == 'periodical_node_form' ||
     $form_id == 'personal_relationship_node_form' ||
     $form_id == 'organization_node_form' ||
     $form_id == 'location_node_form') {


  }

  if($form_id == 'loan_node_form') {

  } elseif($form_id == 'human_node_form') {

  }

    /*
      This does not function as documented: (https://drupal.org/node/304258#drupal-settings and https://drupal.org/node/224333#local_settings_behaviors)
    */
    // (string)(!empty($_SERVER['HTTP_X_REQUESTED_WITH']))))
    
    /*
<?php if($field_is_pers_related_to): ?>
    <div class="node-field-is-pers-related-to">
       <?php print render($field_is_pers_related_to); ?>
<div class="node-add-field-is-pers-related-to">Add a new <?php print l(t('personal relationship'), 'node/add/personal-relationship', array('attributes' => array('class' => 'add-node-modal', 'id' => 'add-personal-relationship-modal'))); ?></div>
</div>
<?php endif; ?>

   <?php if($field_relates_to): ?>
   <div class="node-field-relates-to">
      <?php print render($field_relates_to); ?>
<div id="node-related-objects-container"></div>
<div class="node-add-field-relates-to">Add a new <?php print l(t('organization'), 'node/add/organization', array('attributes' => array('class' => 'add-node-modal', 'id' => 'add-organization-modal'))); ?></div>
</div>
<?php endif; ?>

<?php if($location): ?>
    <div class="node-location">
       <?php print render($location); ?>
<div class="node-add-location">Add a new <?php print l(t('location'), 'node/add/location', array('attributes' => array('class' => 'add-node-modal', 'id' => 'add-location-modal'))); ?></div>
</div>
     */

  /*
  $form['#prefix'] = '<div class="myclass">';
  $form['#suffix'] = '</div>';
  */
}

/**
 * Checks whether the user can access the given object.
 *
 * Checks for object existance, accessiblitly, namespace permissions,
 * and user permissions
 *
 * @param string $perm
 *   User permission to test for.
 * @param FedoraObject $object
 *   The object to test, if NULL given the object doesn't exist or is
 *   inaccessible.
 *
 * @return bool
 *   TRUE if the user is allowed to access this object, FALSE otherwise.
 */
function dss_elc_object_access_callback($perm, $object = NULL) {

  /*
  if(in_array('islandora:pageCModel', $object->models)) {

    return islandora_object_access_callback($perm, $object); 
  }
  */

  return TRUE;
}

function dss_elc_menu_alter(&$items) {

  $items['islandora/object/%islandora_object']['page arguments'] = array(2);
  $items['islandora/object/%islandora_object']['access callback'] = 'dss_elc_object_access_callback';
  $items['islandora/object/%islandora_object']['access arguments'] = array(FEDORA_VIEW_OBJECTS, 2);
  //$items['islandora/object/%islandora_object']['access callback'] = TRUE;
}

/*
  
 */

/*
function template_form_element($variables) {
  $element = &$variables['element'];

  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
		    '#title_display' => 'before',
		    );

  // Add element #id for #type 'item'.
  if (isset($element['#markup']) && !empty($element['#id'])) {
    $attributes['id'] = $element['#id'];
  }
  // Add element's #type and #name as class to aid with JS/CSS selectors.
  $attributes['class'] = array('form-item');
  if (!empty($element['#type'])) {
    $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
  }
  if (!empty($element['#name'])) {
    $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
  }
  // Add a class for disabled elements to facilitate cross-browser styling.
  if (!empty($element['#attributes']['disabled'])) {
    $attributes['class'][] = 'form-disabled';
  }
  $output = '<div' . drupal_attributes($attributes) . '>' . "\n";

  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';

  switch ($element['#title_display']) {
  case 'before':
  case 'invisible':
    $output .= ' ' . theme('form_element_label', $variables);
  $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
  break;

  case 'after':
    $output .= ' ' . $prefix . $element['#children'] . $suffix;
    $output .= ' ' . theme('form_element_label', $variables) . "\n";
    break;

  case 'none':
  case 'attribute':
    // Output no label and no required marker, only the children.
    $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
  break;
  }

  if (!empty($element['#description'])) {
    $output .= '<div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}
*/

/**
 * Set the default value for the unique identifier as the name
 * Implemented for the following Node Content Types:
 ** Person
 ** Human
 ** Organization (Machine name: organization)
 ** Business (Machine name: business)
 ** Club (Machine name: club)
 ** Family (Machine name: family)
 ** Neighborhood (Machine name: neighborhood)
 ** Place of Worship (Machine name: place_of_worship)
 */

/*
function dss_elc_set_form_title_to_name($form) {

  // For edit forms
  if(isset($form['field_name']['und'][0]['value']['#default_value'])) {
    
    $form['title']['#default_value'] = $form['field_name']['und'][0]['value']['#default_value'];
  } else {

    $form['title']['#default_value'] = $form['field_name']['und'][0]['value']['#value'];
    $form['title']['#value'] = $form['field_name']['und'][0]['value']['#value'];
  }

  return $form;
}
*/

/**
 * Implements hook_node_validate()
 *
 */

/*
function dss_elc_node_validate($node, $form, &$form_state) {

  $PERSON_FORMS = array('neighborhood_node_form');

  if(in_array($form['#form_id'], $PERSON_FORMS)) {

    $form = dss_elc_set_form_title_to_name($form);
  }
}
*/

/**
 * Implements hook_form_FORM_ID_alter()
 *
 */

/*
function dss_elc_form_person_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_human_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_organization_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_business_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_club_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_family_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_neighborhood_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}

function dss_elc_form_place_of_worship_node_form_alter(&$form, &$form_state, $form_id) {
  
  $form = dss_elc_set_form_title_to_name($form);
}
*/

/*
 * Implementation of hook_views_pre_build().
 */
function dss_elc_views_pre_build(&$view) {

  /**
   * @todo Implemented CSRF token validation
   */

  /**
   * For integration with DataTables
   *
   * Specify the pages for Views
   * Map request.start to $view->current_page
   * Map request.length to $view->offset
   * Map request.order to $view->sort (must be transformed into an array of variables linked to Drupal View field names e.g. field_loan_duration_value)
   *
   */

  /**
   * Should be deprecated by integrating with the services and services_views Modules
   * Unfortunately, no time to implemeneted the transformation from JSON-serialized Drupal entities into elements which could be parsed by DataTables
   *
   */
  if(array_key_exists('dataTables', $_GET)) {

    $data_tables = json_decode($_GET['dataTables']);
    $data_tables_settings = $data_tables['settings'];

    $view->current_page = $data_tables_settings['currentPage'];
    $view->offset = $data_tables_settings['offset'];
  }
}

function dss_elc_views_pre_render(&$view) {

  $results = &$view->result;

  /**
   * Significant work-around
   * @todo Refactor
   */
  if($view->name == 'loans') {

    foreach($results as $key => $result) {

      /**
       * Ensure that the Book/Periodical/Item (rather than the Manifestation Node) is rendered within the link
       *
       */
      if(!empty($results[$key]->field_field_bib_rel_object)) {
      $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = preg_replace('/' . $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] . '/',
											  $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1,
											  $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup']);
      $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] = $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1;
      
      /**
       * Implemented in response to there being no clear means by which to decode the HTML character entity references within the Drupal stack
       * EDDC-184
       * @todo Refactor
       */
      $bib_rel_object_markup = $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'];
      $bib_rel_object_markup = preg_replace('/&amp;amp;/', '&', $bib_rel_object_markup);
      $bib_rel_object_markup = preg_replace('/&amp;/', '&', $bib_rel_object_markup);
      $bib_rel_object_markup = preg_replace('/&#039;/', "'", $bib_rel_object_markup);
      $bib_rel_object_markup = preg_replace('/&quot;/', '"', $bib_rel_object_markup);
      $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = $bib_rel_object_markup;
      }

      /**
       * Integrating date string parsing for the Views field
       * @todo Resolve for Date intervals within the Views Module
       */

      if(!empty($results[$key]->field_field_loan_duration)) {

	$checkout_date = date('Y-m-d', (int) $results[$key]->field_data_field_loan_duration_field_loan_duration_value);
	$results[$key]->field_data_field_loan_duration_field_loan_duration_value = $checkout_date;
	$results[$key]->field_field_loan_duration[0]['raw']['value'] = $checkout_date;
      }
    }
  } elseif($view->name == 'loans_by_human' || $view->name == 'loans_by_item') {

    /**
     * Integrating date string parsing for the Views field
     * @todo Resolve for Date intervals within the Views Module
     * @todo Resolve inconsistencies between field_data_field_loan_durationfield_loan_duration_value and field_data_field_loan_duration_field_loan_duration_value (cloned Views cannot refer to the same field?)
     */
    foreach($results as $key => $result) {

      /**
       * Ensure that the Book/Periodical/Item (rather than the Manifestation Node) is rendered within the link
       *
       */
      if(!empty($results[$key]->field_field_bib_rel_object)) {

	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = preg_replace('/' . $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] . '/',
											    $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1,
											    $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup']);
	$results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] = $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1;

	/**
	 * Implemented in response to there being no clear means by which to decode the HTML character entity references within the Drupal stack
	 * EDDC-184
	 * @todo Refactor
	 */
	$bib_rel_object_markup = $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'];
	$bib_rel_object_markup = preg_replace('/&amp;amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&#039;/', "'", $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&quot;/', '"', $bib_rel_object_markup);
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = $bib_rel_object_markup;
      }

      if(!empty($results[$key]->field_field_loan_duration)) {

	$checkout_date = date('Y-m-d', (int) $results[$key]->field_data_field_loan_durationfield_loan_duration_value);
	$results[$key]->field_data_field_loan_durationfield_loan_duration_value = $checkout_date;
	$results[$key]->field_field_loan_duration[0]['raw']['value'] = $checkout_date;
      }
    }
  } elseif($view->name == 'loans_presentation') {

    foreach($results as $key => $result) {

      /**
       * Ensure that the Book/Periodical/Item (rather than the Manifestation Node) is rendered within the link
       *
       */
      if(!empty($results[$key]->field_field_bib_rel_object)) {

	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = preg_replace('/' . $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] . '/',
											    $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1,
											    $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup']);
	$results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] = $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1;
      
	/**
	 * Implemented in response to there being no clear means by which to decode the HTML character entity references within the Drupal stack
	 * EDDC-184
	 * @todo Refactor
	 */
	$bib_rel_object_markup = $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'];
	$bib_rel_object_markup = preg_replace('/&amp;amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&#039;/', "'", $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&quot;/', '"', $bib_rel_object_markup);
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = $bib_rel_object_markup;
      }

      /**
       * Integrating date string parsing for the Views field
       * @todo Resolve for Date intervals within the Views Module
       */

      if(!empty($results[$key]->field_field_loan_duration)) {

	$checkout_date = date('Y-m-d', (int) $results[$key]->field_data_field_loan_duration_field_loan_duration_value);
	$results[$key]->field_data_field_loan_duration_field_loan_duration_value = $checkout_date;
	$results[$key]->field_field_loan_duration[0]['raw']['value'] = $checkout_date;
      }
    }
  }
}

function dss_elc_field_views_data_alter(&$result, $field) {

  if(array_key_exists('field_data_field_loan_duration', $result)) {

    $result['field_data_field_loan_duration'];
  }
}

function dss_elc_preprocess_islandora_book_book(array &$variables) {

  $islandora_object = $variables['object'];

  if(in_array('islandora:elc', $islandora_object->getParents())) {

    // Determine if OpenSeadragon is the viewer...
    //if(preg_match('/openseadragon/', $variables['viewer'])) {
    if(true) {

      module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
      $init_pages = islandora_paged_content_get_pages($islandora_object);

      /*
      // If these are East Asia Image Collection postcards, modify the text for the links...
      $prev_content = t('Previous');
      $next_content = t('Next');

      $viewer_page_controls = array();
      
      $variables['viewer_page_controls'] = drupal_render($viewer_page_controls);
      */
    }
  }
}

function dss_elc_views_api() {

  return array( 'api' => 3,
		'path' => drupal_get_path('module', 'dss_elc') . '/views',
		);
}
