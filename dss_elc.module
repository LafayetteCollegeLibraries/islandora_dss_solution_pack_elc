<?php

  /*
   * Intramodular dependencies
   *
   */
module_load_include('inc', 'dss_elc', 'includes/utility');
module_load_include('inc', 'dss_elc', 'includes/data_access');
module_load_include('inc', 'dss_elc', 'includes/person');
module_load_include('inc', 'dss_elc', 'includes/item');
module_load_include('inc', 'dss_elc', 'includes/bib_rels');
module_load_include('inc', 'dss_elc', 'includes/pers_rels');

/**
 * Checks whether the user can access the given object.
 *
 * Checks for object existance, accessiblitly, namespace permissions,
 * and user permissions
 *
 * @param string $perm
 *   User permission to test for.
 * @param FedoraObject $object
 *   The object to test, if NULL given the object doesn't exist or is
 *   inaccessible.
 *
 * @return bool
 *   TRUE if the user is allowed to access this object, FALSE otherwise.
 *
 */
function dss_elc_object_access_callback($perm, $object = NULL) {

  return TRUE;
}

function dss_elc_menu_alter(&$items) {

  $items['islandora/object/%islandora_object']['access callback'] = 'dss_elc_object_access_callback';
}

/**
 * Implements hook_menu()
 *
 */
function dss_elc_menu() {

  $items = array(
		 'node/get' => array(
				     'page callback' => 'dss_elc_get_node_ajax',
				     'access callback' => TRUE,
				     ),
		 'nodes/get' => array(
				      'page callback' => 'dss_elc_get_nodes_ajax',
				      'access callback' => TRUE,
				      ),
		 'pers-rels/get' => array(
					  'page callback' => 'dss_elc_get_pers_rels_ajax',
					  'access callback' => TRUE
					  ),
		 'bib-rels/get' => array(
					 'page callback' => 'dss_elc_get_bib_rels_ajax',
					 'access callback' => TRUE
					 ),
		 'qty/rels' => array(
				     'page callback' => 'dss_elc_qty_rels_ajax',
				     'access callback' => TRUE
				     ),
		 );

  return $items;
}

/**
 * Implements hook_permission()
 * @author griffinj@lafayette.edu
 *
 */
function dss_elc_permission() {

  return array(
	       'access arguments page' => array(
						'title' => t('Query the Person node interface'),
						'description' => t('Query the Person node interface'),
						),
	       );
}

/**
 * Implements hook_theme()
 * @author griffinj@lafayette.edu
 *
 */
function dss_elc_theme($existing, $type, $theme, $path) {

  return array(
	       'loan_node_form' => array(
					 'render element' => 'form',
					 'file' => 'theme/theme.inc',
					 'template' => 'theme/loan-node-form',
					 'path' => drupal_get_path('module', 'dss_elc'),
					 ),
	       'human_node_form' => array(
					  'render element' => 'form',
					  'file' => 'theme/theme.inc',
					  'template' => 'theme/human-node-form',
					  'path' => drupal_get_path('module', 'dss_elc'),
					  ),
	       'book_node_form' => array(
					 'render element' => 'form',
					 'file' => 'theme/theme.inc',
					 'template' => 'theme/book-node-form',
					 'path' => drupal_get_path('module', 'dss_elc'),
					 ),
	       'periodical_node_form' => array(
					       'render element' => 'form',
					       'file' => 'theme/theme.inc',
					       'template' => 'theme/book-node-form',
					       'path' => drupal_get_path('module', 'dss_elc'),
					       ),
	       'item_node_form' => array(
					 'render element' => 'form',
					 'file' => 'theme/theme.inc',
					 'template' => 'theme/item-node-form',
					 'path' => drupal_get_path('module', 'dss_elc'),
					 ),
	       'manifestation_node_form' => array(
						  'render element' => 'form',
						  'file' => 'theme/theme.inc',
						  'template' => 'theme/manifestation-node-form',
						  'path' => drupal_get_path('module', 'dss_elc'),
						  ),
	       'personal_relationship_node_form' => array(
							  'render element' => 'form',
							  'file' => 'theme/theme.inc',
							  'template' => 'theme/personal-relationship-node-form',
							  'path' => drupal_get_path('module', 'dss_elc'),
							  ),
	       /*
		* Temporarily disabled for the initial release of the web service
		* @todo Fully implement for biographical data capture
		*

		'organization_node_form' => array(
					     'render element' => 'form',
					     'file' => 'theme/theme.inc',
					     'template' => 'theme/organization-node-form',
					     'path' => drupal_get_path('module', 'dss_elc'),
					     ),
	       'location_node_form' => array(
					     'render element' => 'form',
					     'file' => 'theme/theme.inc',
					     'template' => 'theme/location-node-form',
					     'path' => drupal_get_path('module', 'dss_elc'),
					     ),
	       */
	       );
}

/**
 * Implements hook_node_presave()
 * @author griffinj@lafayette.edu
 *
 */
define('ROLES_TAXON', 'roles');
function dss_elc_node_presave($node) {

  switch($node->type) {

  case 'loan':

    dss_elc_loan_node_presave($node);
    break;

  case 'personal_relationship':

    //Override the title
    //$node->title = $node->field_pers_rel_subject[$node->language][0]['target_id'] . ' is a ' . $node->field_pers_rel_role[$node->language][0]['tid'] . ' in relation to ' . $node->field_pers_rel_object[$node->language][0]['target_id'];

    $subjectNode = dss_elc_get_node('nid', $node->field_pers_rel_subject[$node->language][0]['target_id'], 'human');
    $objectNode = dss_elc_get_node('nid', $node->field_pers_rel_object[$node->language][0]['target_id']);
    $roleTerm = taxonomy_term_load($node->field_pers_rel_role[$node->language][0]['tid']);

    $node->title = $subjectNode->title . ' is a ' . $roleTerm->name . ' in relation to ' . $objectNode->title;

    break;

  case 'human':

    // Override the title
    // This could normally be overridden using tokens
    // @todo Refactor?
    
    $fields = array();
    foreach(array('field_person_name', 'field_human_middle_initials', 'field_human_surname') as $field) {

      //if(array_key_exists($node->language, $node->{$field}) and array_key_exists(0, ($node->{$field}[$node->language]))) {
      if(array_key_exists($node->language, $node->{$field}) and !empty($node->{$field}[$node->language])) {

	$fields[] = $node->{$field}[$node->language];
      }
    }

    $node->title = implode(' ', array_map(function($field) {

	  $result = '';
	  
	  if(!empty($field)) {

	    $result = $field[0]['value'];
	  }

	  return $result;
	}, $fields));
    break;

  case 'book':
  case 'periodical':
  case 'item':
    
    dss_elc_item_node_presave($node);
  break;

  default:

    break;
  }
}

/**
 * Implements hook_insert()
 * @author griffinj@lafayette.edu
 *
 * The NID is required for the function dss_elc_update_pers_rels
 */
function dss_elc_node_insert($node) {

  switch($node->type) {

  case 'personal_relationship':

    /*
     * @todo Resolve issues 
    // Handling for Representative relationships
    if(!empty($node->field_pers_rel_role[$node->language]) &&
       $node->field_pers_rel_role[$node->language][0]['name'] == 'Representative') {

      dss_elc_update_pers_rels(intval($node->field_pers_rel_subject[$node->language][0]['target_id']), intval($node->field_pers_rel_object[$node->language][0]['target_id']));
    }
    */
    break;
    
  case 'item':
  case 'periodical':
  case 'book':

    dss_elc_item_node_insert($node);
  break;

  default:
    break;
  }
}

/**
 * @todo Attempt to integrate RESTful endpoints using restws Module hooks
 *
 */
function dss_elc_get_pers_rels_ajax($subjectNid) {

  drupal_json_output(dss_elc_get_pers_rels($subjectNid) );
}

function dss_elc_get_bib_rels_ajax($subjectNid) {

  drupal_json_output(dss_elc_get_bib_rels($subjectNid) );
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Show titles of empty fields.
 * Thank you ygerasimov! (Please see http://ygerasimov.com/show-empty-fields)
 * Warning: _Does_ override hide() invocations on fields!
 *
 */
function dss_elc_field_attach_view_alter(&$output, $context) {

  // We proceed only on nodes.
  if ($context['entity_type'] != 'node' || $context['view_mode'] != 'full') {
    
    return;
  }

  $node = $context['entity'];
  // Load all instances of the fields for the node.
  $instances = _field_invoke_get_instances('node', $node->type, array('default' => TRUE, 'deleted' => FALSE));
 
  foreach ($instances as $field_name => $instance) {

    // Set content for fields they are empty.
    if (empty($node->{$field_name})) {

      $display = field_get_display($instance, 'full', $node);

      // Do not add field that is hidden in current display.
      if ($display['type'] == 'hidden') {

        continue;
      }

      // Load field settings.
      $field = field_info_field($field_name);

      // Set output for field.
      $output[$field_name] = array(
				   '#theme' => 'field',
				   '#weight' => $display['weight'],
				   '#title' => $instance['label'],

				   '#label_display' => $display['label'],

				   '#formatter' => $display['type'], // Please see field_default_view()

				   '#field_name' => $field_name,
				   '#field_type' => $field['type'],

				   '#bundle' => $node->type,
				   '#object' => $node,
				   '#items' => array(),
				   '#entity_type' => 'node',

				   0 => array('#markup' => '&nbsp;'),
				   );
    }
  }
}

/**
 * Retrieve Nodes by Content Type
 *
 */
/*
function dss_elc_get_nodes($contentType) {

  $query = new EntityFieldQuery();

  $entities = $query->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('type', $contentType)
    ->execute();

  if(!empty($entities['node'])) {

    return entity_load('node', array_keys($entities['node']));
  } else {

    return array();
  }
}
*/

/**
 * @todo To be integrated with the services Module as a RESTful API
 *
 * Example: http://elc.dev.lafayette.edu/node/get/[CONTENT_TYPE]/[NID]
 * Example: http://elc.dev.lafayette.edu/node/get/[CONTENT_TYPE]/[NID]
 *
 */
function dss_elc_get_node_ajax($contentType, $field, $value=NULL) {

  // If value isn't set, retrieve by NID and contentType
  if(!isset($value)) {

    $value = $field;
    $field = $contentType;

    drupal_json_output(dss_elc_get_node($field, $value));
  } else {
    
    drupal_json_output(dss_elc_get_node($field, $value, $contentType));
  }
}

function dss_elc_get_univariate_rels($contentTypes, $field, $measure_names = array('mean' => array(),
										   'median' => array(),
										   'max' => array(),
										   'total' => array()
										   )) {

  /*
   * Parameterized metrics for univariate visualization
   *
   *  @todo Implement variance, std. deviation, and quantile
   */
  
  $measures = array();
  foreach($measure_names as $measure) {
    
    $measures[$measure] = array();
  }

  switch($field) {

  case 'field_item_format':

    $fieldValues = array('Octavo' => 0,
			 'Quarto' => 1,
			 'Duodecimo' => 2);
    break;

  default:

    $fieldValues = array();
    break;
  }

  foreach($fieldValues as $fieldName => $fieldValue) {

    foreach($contentTypes as $contentType) {

      if(array_key_exists('total', $measures) ||
	 array_key_exists('mean', $measures)) {

	$measures['total'][$contentType][$fieldName] = count(dss_elc_get_nodes($contentType, $field, $fieldValue, FIELD_TYPE_ENTITY));
      }
    }
  }

  if(array_key_exists('mean', $measures)) {

    $reduce = function($u, $v) {
      
	  return $u + $v['total'];
    };

    $fieldTotals = array();
    foreach($measures['total'] as $contentType => $field) {

      // To be implemented
    }

    foreach($fieldValues as $fieldName => $fieldValue) {

      $measures['mean'][$fieldName] = array_reduce($reduce, $measures['total']) / count(array_keys($measures['total'][$contentType]));
    }
  }

  return $measures;
}

/**
 * Retrieve a data set for bivariate analysis
 * @author griffinj@lafayette.edu
 */
function dss_elc_get_bivariate_rels($contentTypes, $fieldU, $fieldV, $fieldUType=0, $fieldVType=0, $dateField=NULL, $dateFieldRange=FALSE) {

  $sets = array();

  foreach($contentTypes as $contentType) {

    $sets[$contentType] = array($fieldU => array($fieldV => array()));
    
    foreach(dss_elc_get_nodes($contentType) as $node) {

      $fieldUValue = dss_elc_get_node_field($node, $fieldU, $fieldUType);
      $fieldVValue = dss_elc_get_node_field($node, $fieldV, $fieldVType);

      
      if($dateFieldRange) {
	
	if(isset($node->$dateField[$node->language][0]['value']) && isset($node->$dateField[$node->language][0]['value2'])) {
	    
	  if($dateField == $fieldU) {
	    
	    if(isset($node->$fieldV)) {

	      //$sets[$contentType] = array($fieldU => array($fieldV => array()));
	      $sets[$contentType][$fieldU][$fieldV][] = array($node->$dateField[$node->language][0]['value2'] - $node->$dateField[$node->language][0]['value'], $fieldVValue);
	    }
	  } else {
	    
	    if(isset($node->$fieldU)) {
	      
	      $sets[$contentType][$fieldU][$fieldV][] = array($fieldUValue, $node->$dateField[$node->language][0]['value2'] - $node->$dateField[$node->language][0]['value']);
	    }
	  }
	}
      } else {
	
	if($dateField == $fieldU) {
	  
	  $sets[$contentType][$fieldU][$fieldV][] = array($node->$dateField[$node->language][0]['value'], $fieldVValue);
	} elseif($dateField == $fieldV) {

	  $sets[$contentType][$fieldU][$fieldV][] = array($fieldUValue, $node->$dateField[$node->language][0]['value']);
	} else {
	  
	  $sets[$contentType][$fieldU][$fieldV][] = array($fieldUValue, $fieldVValue);
	}
      }
    }
  }
}

/**
 * Respond to POST requests for data sets used in quantiative analyses
 * This should be refactored for direct parsing by either NumPy or SciRuby
 * @author griffinj@lafayette.edu
 */
function dss_elc_qty_rels_ajax() {

  if($_POST['analysis'] == 'bivariate') {

    //return drupal_json_output(dss_elc_get_bivariate_rels($_POST['contentTypes'], $_POST['fields'][0], $_POST['fields'][1]));
    return drupal_json_output(array(
				    'loan' => array('value' =>
						    array('field_loan_duration' =>
							  array('total' =>
								array('field_loan_volumes_loaned' => array(
													   array(5, 20),
													   array(480, 90),
													   array(250, 50))
								      )))
						    )));
  }

  if($_POST['contentTypes'] == array('book')) {
    
    return drupal_json_output(
			      array('total' => array('book' => array('Octavo' => 1661,
								     'Quarto' => 46,
								     'Duodecimo' => 1997)))
			      );
      
  } elseif($_POST['contentTypes'] == array('periodical')) {
    
    return drupal_json_output(
			      array('total' => array('periodical' => array('Octavo' => 2,
									   'Quarto' => 0,
									   'Duodecimo' => 2)))
			      );
  }
  
  if(isset($_POST['measures'])) {
    
    return drupal_json_output(dss_elc_get_univariate_rels($_POST['contentTypes'], $_POST['fields'], $_POST['measures']));
  }
  
  return drupal_json_output(dss_elc_get_univariate_rels($_POST['contentTypes'], $_POST['fields']));
}

/**
 *
 * @author griffinj@lafayette.edu
 */
function dss_elc_get_nodes_ajax($contentType, $field, $value=NULL) {

  if(!isset($value)) {

    $value = $field;
    $field = $contentType;

    drupal_json_output(dss_elc_get_nodes(NULL, $field, $value));
  } else {
    
    drupal_json_output(dss_elc_get_nodes($field, $value, $contentType, 1));
  }
}

function dss_elc_form_insert_js() {

  if(empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {

    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'ui.autocomplete');
    drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/node_modal.js');
    drupal_add_js(array('dssElc' => array('isAjaxRequest' => !empty($_SERVER['HTTP_X_REQUESTED_WITH']))), 'setting');
    drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/node.js');
  }
}

function dss_elc_theme_registry_alter(&$theme_registry) {

  /*
  $theme_registry['block']['template'] = 'human';
  $theme_registry['block']['path'] = drupal_get_path('module', 'example_module');
  $theme_registry['block']['type'] = 'module';
  $theme_registry['block']['theme path'] = drupal_get_path('module', 'example_module');
  $theme_registry['block']['theme paths'] = Array();
  */
} 

/**
 * Theme the field_loan_duration Field
 *
 */
function dss_elc_field_loan_duration_after_build(&$element) {

  foreach($element as $key => &$value) {

    if(is_numeric($key)) {

      $value['show_todate']['#title'] = 'Date Returned Listed?';
      $value['show_todate']['#checked'] = TRUE;

      hide($value['show_todate']);

      $value['value']['#title'] = 'Check-out';
      //$value['value']['date']['#description'] = 'YYYY-MM-DD';
      unset($value['value']['date']['#description']);

      $value['value2']['#title'] = 'Check-in';
      //$value['value2']['date']['#description'] = 'YYYY-MM-DD';
      unset($value['value2']['date']['#description']);
    }
  }

  return $element;
}

/**
 * Theme the field_loan_issues_loaned Field
 *
 */
function dss_elc_field_loan_issues_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_loan_volumes_loaned Field
 *
 */
function dss_elc_field_loan_volumes_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_loan_months_loaned Field
 *
 */
function dss_elc_field_loan_months_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_loan_years_loaned Field
 *
 */
function dss_elc_field_loan_years_loaned_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more') {

      $value['#value'] = '+';
    }
  }

  return $element;
}

/**
 * Theme the field_bib_rel_object Field
 *
 */
function dss_elc_field_bib_rel_object_after_build(&$element) {

  foreach($element as $key => &$value) {

    if($key == 'add_more' && isset($value['#type']) && $value['#type'] == 'submit') {

      //$value['#suffix'] = '<button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-book-modal">New Book</button><button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-periodical-modal">New Periodical</button><button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-item-modal">New Item</button>';

      $value['#suffix'] = '<button class="add-node-modal btn btn-info field-add-more-submit form-submit ajax-processed" id="add-item-modal">New Item</button>';      
    }
  }

  return $element;
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Restructuring all Node forms
 *
 */
function dss_elc_form_node_form_alter(&$form, $form_state) {

  $form['actions']['submit']['#value'] = 'Hold for Review';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_loan_node_form_alter(&$form, $form_state, $form_id) {
		
  drupal_add_css(drupal_get_path('module', 'dss_elc') . '/css/loan_form.css');
  dss_elc_form_insert_js();

  // Apply theming for the field_bib_rel_object Field
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#after_build'][] = 'dss_elc_field_bib_rel_object_after_build';

  // Apply theming for the field_loan_duration Field
  $form['field_loan_duration'][$form['field_loan_duration']['#language']]['#after_build'][] = 'dss_elc_field_loan_duration_after_build';
  //$form['field_loan_duration'][$form['field_loan_duration']['#language']]['#process'][] = 'dss_elc_date_combo_element_process';

  // Apply theming for fields
  /**
   * field_loan_issues_loaned
   * field_loan_volumes_loaned
   * field_loan_months_loaned
   * field_loan_years_loaned
   *
   */

  foreach(array('field_loan_issues_loaned',
		'field_loan_volumes_loaned',
		'field_loan_months_loaned',
		'field_loan_years_loaned') as $field_name) {

    //$form[$field_name][$form[$field_name]['#language']]['#after_build'][] = 'dss_elc_' . $field_name . '_after_build';
    hide($form[$field_name]);
  }

  /**
   * 
   *
   */
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#after_build'][] = 'dss_elc_field_bib_rel_object_after_build';

  drupal_set_title(t('Add a Loan'));

  $form['field_loan_shareholder'][$form['field_loan_shareholder']['#language']]['#prefix'] = '<div id="field-loan-shareholder-add-more-wrapper">';
  //$form['field_loan_shareholder'][$form['field_loan_shareholder']['#language']]['#suffix'] = '<div class="node-add-shareholder form-item"><button class="add-node-modal btn btn-info" id="add-human-modal">New Shareholder</button></div></div>';
  $form['field_loan_shareholder'][$form['field_loan_shareholder']['#language']]['#suffix'] = '</div>';

  $form['field_bib_rel_subject'][$form['field_bib_rel_subject']['#language']]['#prefix'] = '<div id="field-bib-rel-subject-add-more-wrapper">';
  //$form['field_bib_rel_subject'][$form['field_bib_rel_subject']['#language']]['#suffix'] = '<div class="node-add-subject form-item"><button class="add-node-modal btn btn-info" id="add-human-modal">New Patron</button></div></div>';
  $form['field_bib_rel_subject'][$form['field_bib_rel_subject']['#language']]['#suffix'] = '</div>';

  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#prefix'] = '<div id="field-bib-rel-object-add-more-wrapper">';
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] = '<div class="node-add-item form-item"><button class="add-node-modal btn btn-info" id="add-item-modal" type="button" data-content-type="item" data-node-type="" data-url="/nodes">Create New Item</button></div></div>';

  $form['field_loan_shareholder']['#attributes']['disabled'] = true;

  // For the Issues Loaned, Volumes Loaned, Months Loaned, and Years Loaned
  foreach(array('issues', 'volumes', 'months', 'years') as $field) {
    
    $form["field_loan_" . $field . "_loaned"][$form["field_loan_" . $field . "_loaned"]['#language']]['add_more']['#value'] = 'Add another ' . substr($field, 0, strlen($field) - 1);
  }

  /**
   * This has been temporarily disabled in order to resolve issues with autocompletion integration
   * @todo Resolve issues with JavaScript integration and pass this markup through the templating layer
   *
   */
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#prefix'] = $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#prefix'] . '<input id="edit-field-bib-rel-object-und" class="form-text required form-autocomplete" type="text" maxlength="1024" size="60" value="" name="field_bib_rel_object[und][0][target_id]" tabindex="4" autocomplete="OFF" aria-autocomplete="list">';

  /**
   * Hard-coding the field for volumes
   * (Note: These are not fields to be captured as Drupal content, as they, more properly, reference other Entities)
   *
   */
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] = $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] . '<div class="control-group form-type-textfield form-item-field-volumes-und-0-value form-item"><label class="control-label" for="edit-field-volumes-und-0-value">Volume(s) </label><div class="controls"><input id="edit-field-volumes-und-0-value" class="text-full form-text" type="text" maxlength="255" size="60" value="" name="volumes[und][0][value]" tabindex=""></div></div>';

  /**
   * Hard-coding the field for issues
   * (Note: These fields are also not to be captured as Drupal content)
   *
   */
  //$form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] = $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['#suffix'] . '<div class="control-group form-type-textfield form-item-field-issues-und-0-value form-item"><label class="control-label" for="edit-field-issues-und-0-value">Issue(s) </label><div class="controls"><input id="edit-field-issues-und-0-value" class="text-full form-text" type="text" maxlength="255" size="60" value="" name="issues[und][0][value]" tabindex=""></div></div>';

  /**
   * Deprecated in favor of JavaScript functionality
   *
   */
  /*
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['add_more']['#label'] = 'More Items Loaned?';
  $form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['add_more']['#value'] = 'More Items Loaned?';
  */
  hide($form['field_bib_rel_object'][$form['field_bib_rel_object']['#language']]['add_more']);

  $form['field_bib_rel_type'][$form['field_bib_rel_subject']['#language']]['#title'] = 'Tags';
  $form['body'][$form['body']['#language']][0]['#title'] = 'Notes for Review';

  hide($form['field_was_ordered']);
  
  //Populate fields if save and add another was pressed
  if(isset($_SESSION['type'])&&$_SESSION['type']=='loan_node_form'){
  	
  	session_cache_set('type',NULL);
  	
  	$node = node_load($_SESSION['nid']);
  	if(isset($node->field_loan_shareholder['und'])){
		$shareholder_node = dss_elc_get_node('nid', $node->field_loan_shareholder['und']['0']['target_id'], 'human');
	}
	$representative_node = dss_elc_get_node('nid', $node->field_bib_rel_subject['und']['0']['target_id'], 'human');
	if(isset($shareholder_node->title)){
		$form['field_loan_shareholder']['und']['#value'] = $shareholder_node->title . ' (' . $shareholder_node->nid . ')';
	}
	$form['field_bib_rel_subject']['und']['#default_value'] = $representative_node->title . ' (' . $representative_node->nid . ')';
 		
	$form['field_loan_duration']['und']['0']['#default_value']['value'] = rtrim($node->field_loan_duration['und']['0']['value'],'T00:00:00');

	session_cache_set('nid',NULL);
  }	
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function dss_elc_form_human_node_form_alter(&$form, $form_state) {

  // Setting the title
  drupal_set_title(t('Add Person'));

  // Set the "name" field to "alias"
  $form['field_person_name'][$form['field_person_name']['#language']][0]['value']['#title'] = 'First Name / Alias';

  /**
   * Reorder the NULL value for field_human_gender
   * Resolves EDDC-156
   */
  unset($form['field_human_gender'][$form['field_human_gender']['#language']]['#options']['_none']);

  /** Set the default value to unknown (for migrated records) */
  $form['field_human_gender'][$form['field_human_gender']['#language']]['#default_value'] = '_none';

  /**
   * Rename the label "N/A" to "Unknown"
   * Resolves EDDC-85
   *
   */
  $form['field_human_gender'][$form['field_human_gender']['#language']]['#options']['_none'] = 'Unknown';
  $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']['#value'] = '+';
  $new_field = array('add_more' => $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']);
  unset($form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']]['add_more']);

  foreach($form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']] as $key => $value) {

    $new_field[$key] = $value;
  }

  $form['field_human_pers_rels'][$form['field_human_pers_rels']['#language']] = $new_field;
  
  //Populates field if save and add another was clicked
  if(isset($_SESSION['type'])&&$_SESSION['type']=='human_node_form'){
  		
  	session_cache_set('type',NULL);
	  
	$this_human_node = node_load($_SESSION['nid']);
	
	if(isset($this_human_node->field_human_surname['und'])){
		$form['field_human_surname']['und']['0']['value']['#value'] = $this_human_node->field_human_surname['und']['0']['value'];
	}
	session_cache_set('nid', NULL);
	
  }

}

function dss_elc_form_ajax_item_node_form_alter(&$form) {

  drupal_set_title(t('Add Item'));

  // Hide certain fields for the modal
  if(!empty($_SERVER['HTTP_X_REQUESTED_WITH'])) {

    $form['field_artifact_type'] = array();
    $form['field_artifact_metadata_record'] = array();
    $form['field_item_embodies'] = array();
  }

  /**
   * Modify the order and labeling for the format types
   * Resolves EDDC-155
   */
  unset($form['field_item_format'][$form['field_item_format']['#language']]['#options']['_none']);
  $form['field_item_format'][$form['field_item_format']['#language']]['#options']['_none'] = 'Unknown';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_book_node_form_alter(&$form, $form_state) {

  dss_elc_form_insert_js();
  drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/book_form.js');

  hide($form['field_item_total_volumes']);

  // Hide certain fields for the modal
  dss_elc_form_ajax_item_node_form_alter($form);
  // Issue
  // Work-around
  hide($form['field_item_volume']);

  // Authors
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button">New Person</button></div></div>';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_periodical_node_form_alter(&$form, $form_state) {

  dss_elc_form_insert_js();
  //drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/book_form.js');
  drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/periodical_form.js');

  hide($form['field_item_total_volumes']);
  // Issue
  // Work-around
  hide($form['field_item_volume']);

  // Hide certain fields for the modal
  dss_elc_form_ajax_item_node_form_alter($form);

  // Authors
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button">New Person</button></div></div>';
}

/**
 * Alterations to the form for personal_relationship nodes
 *
 */
function dss_elc_form_personal_relationship_node_form_alter(&$form, $form_state) {

  drupal_set_title(t('Add Relationship'));
  $form['field_pers_rel_subject'][$form['field_pers_rel_subject']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_pers_rel_subject'][$form['field_pers_rel_subject']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button" data-content-type="human" data-node-type="" data-url="/nodes">Create New Person</button></div></div>';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dss_elc_form_item_node_form_alter(&$form, $form_state) {

  dss_elc_form_insert_js();
  //drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/item_form.js');

  $autocomplete_fields = array('entityRefs' => array("#edit-field-artifact-was-authored-by-und"),
			       'terms' => array("#edit-field-item-number-taxon-und", "#edit-field-item-subject-und", '#edit-field-artifact-type-und')
			       );
  drupal_add_js(array('dssElcAutocomplete' => array('fields' => $autocomplete_fields)), 'setting');
  drupal_add_js(drupal_get_path('module', 'dss_elc') . '/js/src/dss_elc_autocomplete.js');

  hide($form['field_item_total_volumes']);

  /**
   * @author stathisw@lafayette.edu
   *
   */
  // Issue
  // Work-around
  hide($form['field_item_volume']);

  // Hide certain fields for the modal
  dss_elc_form_ajax_item_node_form_alter($form);

  // Authors
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#prefix'] = '<div id="field-item-was-authored-by-add-more-wrapper">';
  $form['field_artifact_was_authored_by'][$form['field_artifact_was_authored_by']['#language']]['#suffix'] = '<div class="node-add-author form-item"><button class="add-node-modal btn btn-info" id="add-human-modal" type="button" data-content-type="human" data-node-type="author">Create New Person</button></div></div>';
  
  //Adding functionality to re-populate fields if it was referenced here from save and add another
  if(isset($_SESSION['type'])&&$_SESSION['type']='item_node_form'){
  	
    session_cache_set('type',NULL);
	
    $item_node = node_load($_SESSION['nid']);
    $input_string = '';

    // Ensure that the value for the field "field_artifact_was_authored_by" actually exists
    if(array_key_exists('und', $item_node->field_artifact_was_authored_by)) {

      $size = count($item_node->field_artifact_was_authored_by['und']);

      foreach($item_node->field_artifact_was_authored_by['und'] as $key => $value){
		
	$author_node = dss_elc_get_node('nid', $value['target_id'], 'human');
	
	$input_string = $input_string . $author_node->title . ' (' . $value['target_id'] . ')';
		
	if($key < $size - 1) {
			
	  $input_string = $input_string . '","';
	}
      }
    }
	
    $form['field_artifact_was_authored_by']['und']['#value'] = $input_string;
    session_cache_set('nid', NULL);
  }
}

/**
 * Implements hook_form_alter
 */
function dss_elc_form_alter(&$form, &$form_state, $form_id) {

  if(array_key_exists('actions', $form)){
 	 hide($form['actions']['preview']);
  }	
  if($form_id == 'multi_node_add_page') {

    //hide(form['fields_req']);
    //hide($form['fields_to_utilize']);
    hide($form['shortcut']);
    $form['number']['#title'] = 'Number of Entities';
  }
}

/*
 * Implementation of hook_views_pre_build().
 */
function dss_elc_views_pre_build(&$view) {

  /**
   * @todo Implemented CSRF token validation
   */

  /**
   * For integration with DataTables
   *
   * Specify the pages for Views
   * Map request.start to $view->current_page
   * Map request.length to $view->offset
   * Map request.order to $view->sort (must be transformed into an array of variables linked to Drupal View field names e.g. field_loan_duration_value)
   *
   */

  /**
   * Should be deprecated by integrating with the services and services_views Modules
   * Unfortunately, no time to implemeneted the transformation from JSON-serialized Drupal entities into elements which could be parsed by DataTables
   *
   */
  if(array_key_exists('dataTables', $_GET)) {

    $data_tables = json_decode($_GET['dataTables']);
    $data_tables_settings = $data_tables['settings'];

    $view->current_page = $data_tables_settings['currentPage'];
    $view->offset = $data_tables_settings['offset'];
  }
}

function dss_elc_views_pre_render(&$view) {

  $results = &$view->result;

  /**
   * Significant work-around
   * @todo Refactor
   */

  if($view->name == 'items') {

    foreach($results as $key => $result) {

      $manifestation = $result->_field_data['nid']['entity'];

      $items = dss_elc_items_by_manifestation($manifestation);

      $volume_refs = array();
      foreach($items as $i => $item) {

	$volume = $item->field_item_volume_migrate[$item->language][0]['tid'];

	// Retrieve the individual loans for volumes
	$volume_refs[$volume] = array('rendered' => array('#markup' => '<a href="/node/' . $item->nid . '">' . $volume . '</a>'));
      }

      ksort($volume_refs);

      $result->field_field_item_volume_migrate = $volume_refs;

      // If there were items in relation to this manifestation...
      if(count($items) > 0) {

	$first_item = reset($items);

	// Iterate through the subject taxonomy terms
	if(array_key_exists($first_item->language, $first_item->field_item_subject)) {

	  foreach($first_item->field_item_subject[$first_item->language] as $term_ref) {

	    // field_field_item_subject	      
	    $term = taxonomy_term_load($term_ref['tid']);

	    if($term) {
	      
	      $result->field_field_item_subject[] = array('rendered' => array('#markup' => '<a href="/taxonomy/term/' . $term->tid . '">' . $term->name . '</a>'));
	    }
	  }
	}

	// Obtain and set the individual type
	$result->node_type = $first_item->type;

	// Set the link to the initial item
	
      }
    }
  } elseif($view->name == 'loans') {
    
    foreach($results as $key => $result) {

      /**
       * Ensure that the Book/Periodical/Item (rather than the Manifestation Node) is rendered within the link
       *
       */
      if(!empty($results[$key]->field_field_bib_rel_object)) {

	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = preg_replace('/' . $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] . '/',
											    $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1,
											    $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup']);
	$results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] = $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1;
      
	/**
	 * Implemented in response to there being no clear means by which to decode the HTML character entity references within the Drupal stack
	 * EDDC-184
	 * @todo Refactor
	 */
	$bib_rel_object_markup = $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'];
	$bib_rel_object_markup = preg_replace('/&amp;amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&#039;/', "'", $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&quot;/', '"', $bib_rel_object_markup);
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = $bib_rel_object_markup;
      } else {

	/**
	 * Serves as a placeholder for improperly-migrated Loan records
	 * Resolves EDDC-218
	 * @todo Resolve EDDC-195
	 */
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = '[Illegible]';
      }

      /**
       * Integrating date string parsing for the Views field
       * @todo Resolve for Date intervals within the Views Module
       */

      if(!empty($results[$key]->field_field_loan_duration)) {

	$checkout_date = date('Y-m-d', (int) $results[$key]->field_data_field_loan_duration_field_loan_duration_value);
	$results[$key]->field_data_field_loan_duration_field_loan_duration_value = $checkout_date;
	$results[$key]->field_field_loan_duration[0]['raw']['value'] = $checkout_date;
      }
    }
  } elseif($view->name == 'loans_by_human' || $view->name == 'loans_by_item') {

    /**
     * Integrating date string parsing for the Views field
     * @todo Resolve for Date intervals within the Views Module
     * @todo Resolve inconsistencies between field_data_field_loan_durationfield_loan_duration_value and field_data_field_loan_duration_field_loan_duration_value (cloned Views cannot refer to the same field?)
     */
    foreach($results as $key => $result) {

      /**
       * Ensure that the Book/Periodical/Item (rather than the Manifestation Node) is rendered within the link
       *
       */
      if(!empty($results[$key]->field_field_bib_rel_object)) {

	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = preg_replace('/' . $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] . '/',
											    $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1,
											    $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup']);
	$results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] = $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1;

	/**
	 * Implemented in response to there being no clear means by which to decode the HTML character entity references within the Drupal stack
	 * EDDC-184
	 * @todo Refactor
	 */
	$bib_rel_object_markup = $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'];
	$bib_rel_object_markup = preg_replace('/&amp;amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&#039;/', "'", $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&quot;/', '"', $bib_rel_object_markup);
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = $bib_rel_object_markup;
      } else {

	/**
	 * Serves as a placeholder for improperly-migrated Loan records
	 * Resolves EDDC-218
	 * @todo Resolve EDDC-195
	 */
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = '[Illegible]';
      }

      if(!empty($results[$key]->field_field_loan_duration)) {

	$checkout_date = date('Y-m-d', (int) $results[$key]->field_data_field_loan_durationfield_loan_duration_value);
	$results[$key]->field_data_field_loan_durationfield_loan_duration_value = $checkout_date;
	$results[$key]->field_field_loan_duration[0]['raw']['value'] = $checkout_date;
      }
    }
  } elseif($view->name == 'loans_presentation') {

    foreach($results as $key => $result) {

      /**
       * Ensure that the Book/Periodical/Item (rather than the Manifestation Node) is rendered within the link
       *
       */
      if(!empty($results[$key]->field_field_bib_rel_object)) {

	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = preg_replace('/' . $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] . '/',
											    $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1,
											    $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup']);
	$results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] = $results[$key]->field_field_bib_rel_object[0]['raw']['target_id'] + 1;
      
	/**
	 * Implemented in response to there being no clear means by which to decode the HTML character entity references within the Drupal stack
	 * EDDC-184
	 * @todo Refactor
	 */
	$bib_rel_object_markup = $results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'];
	$bib_rel_object_markup = preg_replace('/&amp;amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&amp;/', '&', $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&#039;/', "'", $bib_rel_object_markup);
	$bib_rel_object_markup = preg_replace('/&quot;/', '"', $bib_rel_object_markup);
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = $bib_rel_object_markup;
      } else {

	/**
	 * Serves as a placeholder for improperly-migrated Loan records
	 * Resolves EDDC-218
	 * @todo Resolve EDDC-195
	 */
	$results[$key]->field_field_bib_rel_object[0]['rendered']['#markup'] = '[Illegible]';
      }

      /**
       * Integrating date string parsing for the Views field
       * @todo Resolve for Date intervals within the Views Module
       */

      if(!empty($results[$key]->field_field_loan_duration)) {

	$checkout_date = date('Y-m-d', (int) $results[$key]->field_data_field_loan_duration_field_loan_duration_value);
	$results[$key]->field_data_field_loan_duration_field_loan_duration_value = $checkout_date;
	$results[$key]->field_field_loan_duration[0]['raw']['value'] = $checkout_date;
      }
    }
  }
}

function dss_elc_field_views_data_alter(&$result, $field) {

  if(array_key_exists('field_data_field_loan_duration', $result)) {

    $result['field_data_field_loan_duration'];
  }
}

function dss_elc_preprocess_islandora_book_book(array &$variables) {

  $islandora_object = $variables['object'];

  if(in_array('islandora:elc', $islandora_object->getParents())) {

    // Determine if OpenSeadragon is the viewer...
    //if(preg_match('/openseadragon/', $variables['viewer'])) {
    module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
    $init_pages = islandora_paged_content_get_pages($islandora_object);

    /*
    // If these are East Asia Image Collection postcards, modify the text for the links...
    $prev_content = t('Previous');
    $next_content = t('Next');

    $viewer_page_controls = array();
      
    $variables['viewer_page_controls'] = drupal_render($viewer_page_controls);
    */
  }
}

function dss_elc_views_api() {

  return array( 'api' => 3,
		'path' => drupal_get_path('module', 'dss_elc') . '/views',
		);
}

function hold_button_publish_node($form, &$form_state){
	
	$form['values']['status'] = 0;
	
	publish_add_node_form_submit($form, $form_state);
	
}

//overriding publish button to add functionality for repopulation of fields.
function publish_add_button_publish_node($form, &$form_state) {
  // The original functionality from publish_button.module
  // Set the node status as published. And that's it.
  
  $form_state['values']['status'] = 1;

  // Using a slightly changed node_form_submit (see below)
  publish_add_node_form_submit($form, $form_state);

}

/* 
 * Edited node_form_submit() or the publish and add another button, only changing redirect function
 */
function publish_add_node_form_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  
  // The new functionality, values transmitted depend on which form is being submitted  
  session_cache_set('nid',$node->nid);
  switch($form['#form_id']){
  	//Saving shareholder, representative, and checkout date
  	case 'loan_node_form':
	session_cache_set('type',$form['#form_id']);
  	break;
	
	//Saving surname
  	case 'human_node_form':
	session_cache_set('type',$form['#form_id']);
  	break;
	
	//Saving author
	case 'item_node_form':
	session_cache_set('type',$form['#form_id']);
	break;
	
	default: 
	break;
  }
  
  $node_link = l(t('view'), 'node/' . $node->nid);

  $watchdog_args = array('@type' => $node->type, '%title' => $node->title);
  $t_args = array('@type' => node_type_get_name($node), '%title' => $node->title);

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
	//checks to see where to redirect to
	switch($form['#form_id']){
		
		case 'loan_node_form': 
			$form_state['redirect'] = 'add/loan';
			break;
		case 'human_node_form': 
			$form_state['redirect'] = 'add/person';
			break;
		case 'item_node_form': 
			$form_state['redirect'] = 'add/item';
			break;
		default:
			$form_state['redirect'] = node_access('view', $node) ? 'node/' . $node->nid : '<front>';
			break;
	}
    
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  // Clear the page and block caches.
  cache_clear_all();
}

/**
 * @author stathisw@lafayette.edu
 *
 */
function edit_node_discard_updates($form, &$form_state){
	
	drupal_goto($form['path']['source']['#value']);
	
}

function edit_node_hold_for_review($form, &$form_state){
	
	$form_state['values']['status'] = 0;
	
	node_form_submit($form, $form_state);
	
}
